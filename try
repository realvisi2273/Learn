repeat task.wait(3) until game:IsLoaded()
repeat task.wait() until game.Players
repeat task.wait() until game.Players.LocalPlayer
repeat task.wait() until game.Players.LocalPlayer:FindFirstChild("PlayerGui")
repeat task.wait() until game.Players.LocalPlayer.PlayerGui:FindFirstChild("Main");

print("start script")

local Remote = game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("CommF_")
local plr = game.Players.LocalPlayer
local melees = {
    "Death Step",
    "Sharkman Karate",
    "Superhuman",
    "Dragon Talon",
    "Electric Claw",
    "Godhuman",
    "Sanguine Art"
}
local SortRarity = {
    [1] = "Common",
    [2] = "Uncommon",
    [3] = "Rare",
    [4] = "Legendary",
    [5] = "Mythical"
}

local itemTypes = {
    Sword = {Common = {}, Uncommon = {}, Rare = {}, Legendary = {}, Mythical = {}}, 
    Fruit = {Common = {}, Uncommon = {}, Rare = {}, Legendary = {}, Mythical = {}},
    Gun = {Common = {}, Uncommon = {}, Rare = {}, Legendary = {}, Mythical = {}},
    Wear = {Common = {}, Uncommon = {}, Rare = {}, Legendary = {}, Mythical = {}},
    Material = {Common = {}, Uncommon = {}, Rare = {}, Legendary = {}, Mythical = {}}
}

local statusAccount = {
    Status = ""
}

while true do
    print("working")
    local u = Remote:InvokeServer("getInventory")
    local Race = " V1"
    local meleedata = {}
    local sworddata = {}
    local fruitdata = {}
    local Gundata = {}
    local weardata = {}
    local materialdata = {}

    if plr.Character then
        if plr.Character:FindFirstChild("RaceTransformed") then
            Race = " V4"
        elseif Remote:InvokeServer("Wenlocktoad", "1") == -2 then
            Race = " V3"
        elseif Remote:InvokeServer("Alchemist", "1") == -2 then
            Race = " V2"
        end
    end

    local data = {
        PlayerName = plr.Name,
        Level = tostring(plr.Data.Level.Value):reverse():gsub("%d%d%d", "%1,"):reverse():gsub("^,", ""),
        Beli = tostring(plr.Data.Beli.Value):reverse():gsub("%d%d%d", "%1,"):reverse():gsub("^,", ""),
        Frag = tostring(plr.Data.Fragments.Value):reverse():gsub("%d%d%d", "%1,"):reverse():gsub("^,", ""),
        DevilFruit = tostring(plr.Data.DevilFruit.Value),
        BountyHonor = tostring(plr.leaderstats["Bounty/Honor"].Value):reverse():gsub("%d%d%d", "%1,"):reverse():gsub("^,", ""),
        Race = plr.Data.Race.Value .. Race,
        Melee = meleedata,
        Sword = itemTypes.Sword,
        Fruit = itemTypes.Fruit,
        Gun = itemTypes.Gun,
        Wear = itemTypes.Wear,
        Material = itemTypes.Material,
        Status = statusAccount.Status
    }

    for i, v in pairs(u) do
        local rarity = SortRarity[v["Rarity"]]  -- Lấy tên độ hiếm từ bảng SortRarity
        if v["Type"] == "Sword" then
            table.insert(itemTypes.Sword[rarity], {Name = v["Name"]})
        elseif v["Type"] == "Blox Fruit" then
            table.insert(itemTypes.Fruit[rarity], {Name = v["Name"]})
        elseif v["Type"] == "Material" then
            table.insert(itemTypes.Material[rarity], {Name = v["Name"], Count = v["Count"]})
        elseif v["Type"] == "Gun" then
            table.insert(itemTypes.Gun[rarity], {Name = v["Name"]})
        elseif v["Type"] == "Wear" then
            table.insert(itemTypes.Wear[rarity], {Name = v["Name"]})
        end
    end


    for i, v in pairs(melees) do
        if Remote:InvokeServer("Buy" .. string.gsub(v, " ", ""), true) == 1 then
            table.insert(meleedata, v)
        end
    end

    -- Kiểm tra xem "Godhuman" có trong meleedata không
    local godhumanExists = false
    local sanguineArtExists = false
    for _, melee in pairs(meleedata) do
        if melee == "Sanguine Art" then
            sanguineArtExists = true
            break
        elseif melee == "Godhuman" then
            godhumanExists = true
            break
        end
    end

    local isEnoughMaterial = false
    local isHaveValkyrieHelm = false
    local isHaveMirrorFractal = false
    for _, item in pairs(itemTypes.Material.Mythical) do
        if item.Name == "Mirror Fractal" then
            isHaveMirrorFractal = true
            break
        end
    end
    for _, item in pairs(itemTypes.Wear.Legendary) do
        if item.Name == "Valkyrie Helm" then
            isHaveValkyrieHelm = true
            break
        end
    end
    
    current_level = plr.Data.Level.Value
    current_Beli = plr.Data.Beli.Value

    if current_level >= 2600 and current_Beli > 500000 then
        if isHaveMirrorFractal and isHaveValkyrieHelm and godhumanExists then
            statusAccount.Status = "Gears"
        elseif sanguineArtExists and godhumanExists then
            statusAccount.Status = "Sanguine Art"
        elseif godhumanExists then
            statusAccount.Status = "Godhuman"
        end
    end
    
    -- Ghi dữ liệu vào tệp JSON
    local jsonData = game:GetService("HttpService"):JSONEncode(data)
    writefile(plr.Name .. "123" .. ".json", jsonData)

    print("finished")

    wait(30)
end
